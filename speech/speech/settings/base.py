"""
Django settings for speech project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.join(BASE_DIR, '../')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'p%$)1p=h+w()c9(tn1j@zml$ahb+646zzl$zye1&hwt=nx#7yu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels' ## not included in third party b/c made officially by Django
]
LOCAL_APPS = [
    'speech',
    'toneAnalyzer',
    'transcoder',
    'transcriber',
    'chunkedUpload',
    'common'
]
THIRD_PARTY_APPS = [
    'corsheaders',
    'rest_framework'
]
INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'speech.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'speech.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Uploaded Files
UNTRANSCODED_PREFIX = 'raw'
TRANSCODED_PREFIX = 'transcoded'
MEDIA_ROOT = BASE_DIR + '/uploads/'

#### CORS SETTINGS

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'content-range',
    'content-disposition',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken',
    'Access-Control-Allow-Origin',
    'Access-Control-Allow-Headers'
)

##Channel Layers
# channel_routing = {
#     "some-channel": "myapp.consumers.my_consumer",
# }

CHANNEL_LAYERS = {
    "default": {
        # "BACKEND": "asgiref.inmemory.ChannelLayer",
        "BACKEND": "asgi_redis.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379')],
        },
        "ROUTING": "speech.routing.channel_routing",
    },
}


### API Credentials

IBM_URL = "https://stream.watsonplatform.net/speech-to-text/api"
IBM_SPEECH_RECOGNITION_USERNAME = ""
IBM_SPEECH_RECOGNITION_PASSWORD = ""
IBM_TONE_ANALYZER_USERNAME = ""
IBM_TONE_ANALYZER_PASSWORD = ""

GOOGLE_KEY = "AIzaSyBdiYBptk8Hb0l9KUo5Tq0Atlm75z259Ac"

## REST API

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    )
}

### LOGGIGN


LOGFILE_SIZE = 1024 * 1024 * 10

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'globalFile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'xlogger/global.log',
            'maxBytes': LOGFILE_SIZE * 2,
            'formatter': 'verbose'
        },
        'toneAnalyzerFile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'xlogger/toneAnalysis.log',
            'maxBytes': LOGFILE_SIZE,
            'formatter': 'verbose'
        },
        'transcoderFile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'xlogger/transcoder.log',
            'maxBytes': LOGFILE_SIZE,
            'formatter': 'verbose'
        },
        'transcriberFile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'xlogger/transcriber.log',
            'maxBytes': LOGFILE_SIZE,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'common.globalLogger': {
            'handlers': ['globalFile', ],
            'level': 'DEBUG',
            'propagate': True,
        },
        'transcoder.utils.transcoder': {
            'handlers': ['transcoderFile', ],
            'level': 'DEBUG',
            'propagate': True,
        },
        'transcriber.utils.transcriber': {
            'handlers': ['transcriberFile', ],
            'level': 'DEBUG',
            'propagate': True,
        },
        'toneAnalyzer.utils.toneAnalyzer': {
            'handlers': ['toneAnalyzerFile', ],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}